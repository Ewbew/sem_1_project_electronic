
projekt_bil_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800200  00800200  00000342  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000128b  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec2  00000000  00000000  000016cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000564  00000000  00000000  00002591  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000837  00000000  00000000  00002ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000460  00000000  00000000  000034db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000393b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	a7 c0       	rjmp	.+334    	; 0x154 <__vector_1>
   6:	00 00       	nop
   8:	b5 c0       	rjmp	.+362    	; 0x174 <__vector_2>
   a:	00 00       	nop
   c:	f2 c0       	rjmp	.+484    	; 0x1f2 <__vector_3>
   e:	00 00       	nop
  10:	8b c0       	rjmp	.+278    	; 0x128 <__bad_interrupt>
  12:	00 00       	nop
  14:	89 c0       	rjmp	.+274    	; 0x128 <__bad_interrupt>
  16:	00 00       	nop
  18:	87 c0       	rjmp	.+270    	; 0x128 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	85 c0       	rjmp	.+266    	; 0x128 <__bad_interrupt>
  1e:	00 00       	nop
  20:	83 c0       	rjmp	.+262    	; 0x128 <__bad_interrupt>
  22:	00 00       	nop
  24:	81 c0       	rjmp	.+258    	; 0x128 <__bad_interrupt>
  26:	00 00       	nop
  28:	7f c0       	rjmp	.+254    	; 0x128 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7d c0       	rjmp	.+250    	; 0x128 <__bad_interrupt>
  2e:	00 00       	nop
  30:	7b c0       	rjmp	.+246    	; 0x128 <__bad_interrupt>
  32:	00 00       	nop
  34:	79 c0       	rjmp	.+242    	; 0x128 <__bad_interrupt>
  36:	00 00       	nop
  38:	77 c0       	rjmp	.+238    	; 0x128 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	75 c0       	rjmp	.+234    	; 0x128 <__bad_interrupt>
  3e:	00 00       	nop
  40:	73 c0       	rjmp	.+230    	; 0x128 <__bad_interrupt>
  42:	00 00       	nop
  44:	71 c0       	rjmp	.+226    	; 0x128 <__bad_interrupt>
  46:	00 00       	nop
  48:	6f c0       	rjmp	.+222    	; 0x128 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6d c0       	rjmp	.+218    	; 0x128 <__bad_interrupt>
  4e:	00 00       	nop
  50:	6b c0       	rjmp	.+214    	; 0x128 <__bad_interrupt>
  52:	00 00       	nop
  54:	69 c0       	rjmp	.+210    	; 0x128 <__bad_interrupt>
  56:	00 00       	nop
  58:	67 c0       	rjmp	.+206    	; 0x128 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	65 c0       	rjmp	.+202    	; 0x128 <__bad_interrupt>
  5e:	00 00       	nop
  60:	63 c0       	rjmp	.+198    	; 0x128 <__bad_interrupt>
  62:	00 00       	nop
  64:	61 c0       	rjmp	.+194    	; 0x128 <__bad_interrupt>
  66:	00 00       	nop
  68:	5f c0       	rjmp	.+190    	; 0x128 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5d c0       	rjmp	.+186    	; 0x128 <__bad_interrupt>
  6e:	00 00       	nop
  70:	5b c0       	rjmp	.+182    	; 0x128 <__bad_interrupt>
  72:	00 00       	nop
  74:	59 c0       	rjmp	.+178    	; 0x128 <__bad_interrupt>
  76:	00 00       	nop
  78:	57 c0       	rjmp	.+174    	; 0x128 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	55 c0       	rjmp	.+170    	; 0x128 <__bad_interrupt>
  7e:	00 00       	nop
  80:	53 c0       	rjmp	.+166    	; 0x128 <__bad_interrupt>
  82:	00 00       	nop
  84:	51 c0       	rjmp	.+162    	; 0x128 <__bad_interrupt>
  86:	00 00       	nop
  88:	4f c0       	rjmp	.+158    	; 0x128 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4d c0       	rjmp	.+154    	; 0x128 <__bad_interrupt>
  8e:	00 00       	nop
  90:	4b c0       	rjmp	.+150    	; 0x128 <__bad_interrupt>
  92:	00 00       	nop
  94:	49 c0       	rjmp	.+146    	; 0x128 <__bad_interrupt>
  96:	00 00       	nop
  98:	47 c0       	rjmp	.+142    	; 0x128 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	45 c0       	rjmp	.+138    	; 0x128 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	43 c0       	rjmp	.+134    	; 0x128 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	41 c0       	rjmp	.+130    	; 0x128 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3f c0       	rjmp	.+126    	; 0x128 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3d c0       	rjmp	.+122    	; 0x128 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	3b c0       	rjmp	.+118    	; 0x128 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	39 c0       	rjmp	.+114    	; 0x128 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	37 c0       	rjmp	.+110    	; 0x128 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	35 c0       	rjmp	.+106    	; 0x128 <__bad_interrupt>
  be:	00 00       	nop
  c0:	33 c0       	rjmp	.+102    	; 0x128 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	31 c0       	rjmp	.+98     	; 0x128 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2f c0       	rjmp	.+94     	; 0x128 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2d c0       	rjmp	.+90     	; 0x128 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	2b c0       	rjmp	.+86     	; 0x128 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	29 c0       	rjmp	.+82     	; 0x128 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	27 c0       	rjmp	.+78     	; 0x128 <__bad_interrupt>
  da:	00 00       	nop
  dc:	25 c0       	rjmp	.+74     	; 0x128 <__bad_interrupt>
  de:	00 00       	nop
  e0:	23 c0       	rjmp	.+70     	; 0x128 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	57 01       	movw	r10, r14

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_clear_bss>:
  f6:	22 e0       	ldi	r18, 0x02	; 2
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a6 30       	cpi	r26, 0x06	; 6
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>

00000106 <__do_global_ctors>:
 106:	10 e0       	ldi	r17, 0x00	; 0
 108:	c3 e7       	ldi	r28, 0x73	; 115
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	00 e0       	ldi	r16, 0x00	; 0
 10e:	05 c0       	rjmp	.+10     	; 0x11a <__do_global_ctors+0x14>
 110:	21 97       	sbiw	r28, 0x01	; 1
 112:	01 09       	sbc	r16, r1
 114:	80 2f       	mov	r24, r16
 116:	fe 01       	movw	r30, r28
 118:	d0 d0       	rcall	.+416    	; 0x2ba <__tablejump2__>
 11a:	c2 37       	cpi	r28, 0x72	; 114
 11c:	d1 07       	cpc	r29, r17
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 07       	cpc	r16, r24
 122:	b1 f7       	brne	.-20     	; 0x110 <__do_global_ctors+0xa>
 124:	a5 d0       	rcall	.+330    	; 0x270 <main>
 126:	d1 c0       	rjmp	.+418    	; 0x2ca <_exit>

00000128 <__bad_interrupt>:
 128:	6b cf       	rjmp	.-298    	; 0x0 <__vectors>

0000012a <_ZN14DrivingControlC1Ev>:
	if (counter_ >= 0 && counter_ < MAX_COUNTER) {
		return SPEED_LEVELS[counter_];
		} else {
		return -1;
	}
}
 12a:	fc 01       	movw	r30, r24
 12c:	11 82       	std	Z+1, r1	; 0x01
 12e:	10 82       	st	Z, r1
 130:	08 95       	ret

00000132 <_ZN14DrivingControl17increment_counterEv>:

void DrivingControl::increment_counter(){
	counter_++;
 132:	fc 01       	movw	r30, r24
 134:	20 81       	ld	r18, Z
 136:	31 81       	ldd	r19, Z+1	; 0x01
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	31 83       	std	Z+1, r19	; 0x01
 13e:	20 83       	st	Z, r18
 140:	08 95       	ret

00000142 <_Z41__static_initialization_and_destruction_0ii>:
    while (1) 
    {
		
		
    }
}
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	31 f4       	brne	.+12     	; 0x152 <_Z41__static_initialization_and_destruction_0ii+0x10>
 146:	6f 3f       	cpi	r22, 0xFF	; 255
 148:	7f 4f       	sbci	r23, 0xFF	; 255
 14a:	19 f4       	brne	.+6      	; 0x152 <_Z41__static_initialization_and_destruction_0ii+0x10>

// Start variable sættes til at være false til at starte med; skiftes til true i ISR for INT0, 
// som aktiveres ved et tryk på en eksterne knap på bilen
volatile bool start = false;

DrivingControl control;
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	92 e0       	ldi	r25, 0x02	; 2
 150:	ec cf       	rjmp	.-40     	; 0x12a <_ZN14DrivingControlC1Ev>
 152:	08 95       	ret

00000154 <__vector_1>:

// Interrupt rutine for start af bil:
ISR(INT0_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
	start = true;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <start>
	reti();
 166:	18 95       	reti
}
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_2>:


// TO-DO - brug en metode i driving control til at increment counter
// TO-DO  send afspilningslyd for hver gang en refleksbrik passeres  bør kunne laves med en klassemetode, e.g. sound.play_sound()
ISR(INT1_vect){
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	0b b6       	in	r0, 0x3b	; 59
 180:	0f 92       	push	r0
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	4f 93       	push	r20
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	// Vi tæller counter op med 1
	control.increment_counter();
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	92 e0       	ldi	r25, 0x02	; 2
 19e:	c9 df       	rcall	.-110    	; 0x132 <_ZN14DrivingControl17increment_counterEv>
	
	// Vi dissabler de to ISR for refleksbrikkerne kortvarigt, for at være sikker på, 
	//at der kun bliver talt op én gang per reflekspar på banen:
	EIMSK &= 0b11111100;
 1a0:	8d b3       	in	r24, 0x1d	; 29
 1a2:	8c 7f       	andi	r24, 0xFC	; 252
 1a4:	8d bb       	out	0x1d, r24	; 29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	82 e5       	ldi	r24, 0x52	; 82
 1aa:	97 e0       	ldi	r25, 0x07	; 7
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <__vector_2+0x38>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <__vector_2+0x42>
 1b6:	00 00       	nop
	_delay_ms(DEBOUNCE_DELAY_MS); // OBS; denne værdi skal findes gennem tests. Prøvede værdier: 150
	
	// For at være på den sikre side, så nulstiller vi interruptsflagene for INT1 & INT2, i tilfælde af, at de var blevet sat.
	// Man nulstiller dem ved at skrive 1 til de tilsvarende bit pladser i flag registret:
	if(EIFR!=0){
 1b8:	8c b3       	in	r24, 0x1c	; 28
 1ba:	88 23       	and	r24, r24
 1bc:	19 f0       	breq	.+6      	; 0x1c4 <__vector_2+0x50>
		EIFR |= 0b00000011;
 1be:	8c b3       	in	r24, 0x1c	; 28
 1c0:	83 60       	ori	r24, 0x03	; 3
 1c2:	8c bb       	out	0x1c, r24	; 28
	}
	
	// Vi enabler de to interrupts for INT1 og INT2 igen
	EIMSK |= 0b00000011;	
 1c4:	8d b3       	in	r24, 0x1d	; 29
 1c6:	83 60       	ori	r24, 0x03	; 3
 1c8:	8d bb       	out	0x1d, r24	; 29
	reti();
 1ca:	18 95       	reti
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0b be       	out	0x3b, r0	; 59
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_3>:


// TO-DO - brug en metode i driving control til at increment counter
ISR(INT2_vect){
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	0b b6       	in	r0, 0x3b	; 59
 1fe:	0f 92       	push	r0
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	//(Kopi af ISR for INT1)
	
	// Vi tæller counter op med 1
	control.increment_counter();
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	8a df       	rcall	.-236    	; 0x132 <_ZN14DrivingControl17increment_counterEv>
		
	// Vi dissabler de to ISR for refleksbrikkerne kortvarigt, for at være sikker på,
	//at der kun bliver talt op én gang per reflekspar på banen:
	EIMSK &= 0b11111100;
 21e:	8d b3       	in	r24, 0x1d	; 29
 220:	8c 7f       	andi	r24, 0xFC	; 252
 222:	8d bb       	out	0x1d, r24	; 29
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	82 e5       	ldi	r24, 0x52	; 82
 228:	97 e0       	ldi	r25, 0x07	; 7
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <__vector_3+0x38>
 232:	00 c0       	rjmp	.+0      	; 0x234 <__vector_3+0x42>
 234:	00 00       	nop
	_delay_ms(DEBOUNCE_DELAY_MS); // OBS; denne værdi skal findes gennem tests. Prøvede værdier: 150
		
	// For at være på den sikre side, så nulstiller vi interruptsflagene for INT1 & INT2, i tilfælde af, at de var blevet sat.
	// Man nulstiller dem ved at skrive 1 til de tilsvarende bit pladser i flag registret:
	if(EIFR!=0){
 236:	8c b3       	in	r24, 0x1c	; 28
 238:	88 23       	and	r24, r24
 23a:	19 f0       	breq	.+6      	; 0x242 <__vector_3+0x50>
		EIFR |= 0b00000011;
 23c:	8c b3       	in	r24, 0x1c	; 28
 23e:	83 60       	ori	r24, 0x03	; 3
 240:	8c bb       	out	0x1c, r24	; 28
	}
		
	// Vi enabler de to interrupts for INT1 og INT2 igen
	EIMSK |= 0b00000011;
 242:	8d b3       	in	r24, 0x1d	; 29
 244:	83 60       	ori	r24, 0x03	; 3
 246:	8d bb       	out	0x1d, r24	; 29
	reti();
 248:	18 95       	reti
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0b be       	out	0x3b, r0	; 59
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <main>:

int main(void)
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	00 d0       	rcall	.+0      	; 0x276 <main+0x6>
 276:	1f 92       	push	r1
 278:	1f 92       	push	r1
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
	
	control = DrivingControl();
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	53 df       	rcall	.-346    	; 0x12a <_ZN14DrivingControlC1Ev>
 284:	85 e0       	ldi	r24, 0x05	; 5
 286:	fe 01       	movw	r30, r28
 288:	31 96       	adiw	r30, 0x01	; 1
 28a:	a0 e0       	ldi	r26, 0x00	; 0
 28c:	b2 e0       	ldi	r27, 0x02	; 2
 28e:	01 90       	ld	r0, Z+
 290:	0d 92       	st	X+, r0
 292:	8a 95       	dec	r24
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0x1e>
	
	// Opsætning af ISR'er; alle sættes til at aktivere korresponderende ISR ved rising edge
	EICRA = 0b00111111;
 296:	8f e3       	ldi	r24, 0x3F	; 63
 298:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	
	// Vi enabler de tre interrupts
	EIMSK |= 0b00000111;
 29c:	8d b3       	in	r24, 0x1d	; 29
 29e:	87 60       	ori	r24, 0x07	; 7
 2a0:	8d bb       	out	0x1d, r24	; 29
	
	// Enable global interrupt flag:
	sei();
 2a2:	78 94       	sei

	while (!start);
 2a4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <start>
 2a8:	88 23       	and	r24, r24
 2aa:	e1 f3       	breq	.-8      	; 0x2a4 <main+0x34>
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <main+0x3c>

000002ae <_GLOBAL__sub_I_start>:
    while (1) 
    {
		
		
    }
}
 2ae:	6f ef       	ldi	r22, 0xFF	; 255
 2b0:	7f ef       	ldi	r23, 0xFF	; 255
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	45 cf       	rjmp	.-374    	; 0x142 <_Z41__static_initialization_and_destruction_0ii>
 2b8:	08 95       	ret

000002ba <__tablejump2__>:
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	88 1f       	adc	r24, r24
 2c0:	8b bf       	out	0x3b, r24	; 59
 2c2:	07 90       	elpm	r0, Z+
 2c4:	f6 91       	elpm	r31, Z
 2c6:	e0 2d       	mov	r30, r0
 2c8:	19 94       	eijmp

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
